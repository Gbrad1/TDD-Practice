import org.junit.Assert;
import org.junit.Test;

import static org.junit.Assert.*;

public class MainTest {
    Main newMain;


    @org.junit.Before
    public void setUp() throws Exception {
        newMain = new Main();
    }

    @org.junit.After
    public void tearDown() throws Exception {
    }

    @Test
    public void whatever() {
        //Given
        Integer[] testArray = {1, 2, 3, 4};
        Integer expected = 50;
        //When
        Integer actual = newMain.getSum(testArray);
        //Then
        Assert.assertEquals(expected, actual);
    }

    @Test
    public void newTest() {
        //Given
        Integer[] testArray = {1, 2, 3, 4};
        Integer expected = 50;
        //When
        Integer actual = newMain.fasterSum(testArray);
        //Then
        Assert.assertEquals(expected, actual);
    }

    @Test
    public void stupidBigTest() {
        //Given
        Integer[] testArray = {};
        Integer expected = 2062704876;
        //When
        Integer actual = newMain.fasterSum(testArray);
        //Then
        Assert.assertEquals(expected, actual);
    }

    @Test
    public void shmediumArrayTest() {
        //Given
        Integer[] testArray = {1, 2, 6, 22, 25, 26, 33, 37, 41, 42, 43, 49, 63, 66, 70, 76, 83, 89, 90, 94, 95, 96, 102, 106, 120, 123, 125, 127, 131, 138, 142, 163, 164, 172, 176, 185, 186, 195, 196, 197, 202, 204, 207, 208, 209, 212, 217, 230, 231, 236, 252, 254, 256, 259, 267, 281, 283, 284, 288, 290, 302, 308, 312, 313, 317, 318, 336, 339, 340, 348, 378, 380, 383, 385, 396, 398, 406, 408, 409, 412, 431, 437, 443, 449, 474, 477, 478, 486, 490, 495, 498, 502, 503, 507, 514, 522, 527, 528, 532, 533, 537, 541, 556, 557, 560, 564, 566, 574, 579, 586, 590, 592, 597, 603, 604, 605, 607, 611, 614, 621, 623, 626, 630, 639, 641, 645, 657, 665, 666, 668, 669, 670, 676, 677, 679, 683, 686, 688, 691, 695, 699, 709, 716, 717, 720, 722, 723, 731, 733, 735, 739, 740, 746, 759, 767, 768, 776, 781, 789, 795, 796, 797, 802, 818, 829, 833, 834, 835, 846, 850, 851, 853, 856, 858, 862, 866, 870, 882, 884, 900, 901, 912, 915, 917, 920, 922, 932, 933, 934, 940, 941, 950, 961, 962, 967, 970, 972, 989, 990, 997};
        Integer expected = 693144874;
        //When
        Integer actual = newMain.fasterSum(testArray);
        //Then
        Assert.assertEquals(expected, actual);
    }

    @Test
    public void shmediumArrayTestwithForLoops() {
        //Given
        Integer[] testArray = {1, 2, 6, 22, 25, 26, 33, 37, 41, 42, 43, 49, 63, 66, 70, 76, 83, 89, 90, 94, 95, 96, 102, 106, 120, 123, 125, 127, 131, 138, 142, 163, 164, 172, 176, 185, 186, 195, 196, 197, 202, 204, 207, 208, 209, 212, 217, 230, 231, 236, 252, 254, 256, 259, 267, 281, 283, 284, 288, 290, 302, 308, 312, 313, 317, 318, 336, 339, 340, 348, 378, 380, 383, 385, 396, 398, 406, 408, 409, 412, 431, 437, 443, 449, 474, 477, 478, 486, 490, 495, 498, 502, 503, 507, 514, 522, 527, 528, 532, 533, 537, 541, 556, 557, 560, 564, 566, 574, 579, 586, 590, 592, 597, 603, 604, 605, 607, 611, 614, 621, 623, 626, 630, 639, 641, 645, 657, 665, 666, 668, 669, 670, 676, 677, 679, 683, 686, 688, 691, 695, 699, 709, 716, 717, 720, 722, 723, 731, 733, 735, 739, 740, 746, 759, 767, 768, 776, 781, 789, 795, 796, 797, 802, 818, 829, 833, 834, 835, 846, 850, 851, 853, 856, 858, 862, 866, 870, 882, 884, 900, 901, 912, 915, 917, 920, 922, 932, 933, 934, 940, 941, 950, 961, 962, 967, 970, 972, 989, 990, 997};
        Integer expected = 693144874;
        //When
        Integer actual = newMain.getSum(testArray);
        //Then
        Assert.assertEquals(expected, actual);
    }

    @Test
    public void stupidBigWithNestedForLoops() {
        //Given
        Integer[] testArray = {};
        Integer expected = 2062704876;
        //When
        Integer actual = newMain.getSum(testArray);
        //Then
        Assert.assertEquals(expected, actual);
    }

    @Test
    public void longGetSum() {
        //Given
        Integer[] testArray = {81, 134, 157, 290, 550, 644, 693, 734, 902, 969, 1107, 1154, 1239, 1285, 1351, 1566, 1616, 1632, 1779, 1858, 1884, 1955, 2000, 2023, 2069, 2159, 2281, 2375, 2446, 2535, 2628, 2709, 2723, 2830, 2944, 2956, 3096, 3248, 3302, 3351, 3405, 3507, 3674, 3692, 3811, 3974, 4177, 4191, 4471, 4617, 4673, 5018, 5038, 5097, 5302, 5330, 5410, 5530, 5591, 5786, 6013, 6144, 6173, 6484, 6595, 6718, 6743, 7117, 7175, 7424, 7547, 7575, 7581, 7684, 7761, 7801, 7886, 7976, 8113, 8164, 8180, 8260, 8469, 8500, 8565, 8591, 8597, 8634, 8679, 8790, 9005, 9127, 9136, 9355, 9386, 9432, 9444, 9473, 9547, 9646, 9649, 9771, 9780, 9835, 9968, 10177, 10304, 10464, 10489, 10544, 10593, 11023, 11297, 11430, 11473, 11864, 12037, 12091, 12209, 12600, 12847, 12959, 12984, 13048, 13091, 13372, 13500, 13575, 13594, 13850, 13902, 13950, 13976, 14044, 14414, 14432, 14443, 14500, 14679, 15194, 15221, 15254, 15342, 15344, 15358, 15378, 15590, 15595, 15792, 16193, 16394, 16518, 16545, 16667, 16709, 17408, 17666, 17682, 17747, 17870, 17929, 17989, 17999, 18108, 18185, 18354, 18363, 18431, 18475, 18630, 18645, 18775, 18805, 18856, 19031, 19059, 19077, 19085, 19181, 19310, 19583, 19666, 19886, 20006, 20079, 20208, 20251, 20324, 20473, 20545, 20552, 20606, 20720, 20803, 20867, 20888, 21029, 21081, 21332, 21406, 21424, 21445, 21458, 21568, 21665, 21672, 21991, 21993, 22019, 22499, 22571, 22574, 22583, 22709, 22773, 22883, 22909, 23011, 23250, 23349, 23453, 23472, 23664, 23774, 23851, 23882, 23939, 24303, 24372, 24427, 24459, 24657, 24824, 24834, 24894, 24990, 25179, 25241, 25251, 25493, 25532, 25727, 25853, 25885, 25949, 26034, 26115, 26194, 26248, 26308, 26344, 26517, 26628, 26960, 27010, 27040, 27144, 27371, 27445, 27762, 27832, 27974, 28338, 28389, 28395, 28431, 28515, 28600, 28725, 28772, 28844, 28991, 29060, 29314, 29456, 29721, 29934, 30045, 30094, 30117, 30241, 30379, 30513, 30674, 30743, 30753, 30907, 31017, 31025, 31182, 31202, 31277, 31284, 31296, 31421, 31497, 31522, 31645, 31759, 31840, 31866, 31925, 31930, 31944, 31984, 32192, 32268, 32274, 32372, 32436, 32549, 32633, 32731, 32829, 32843, 32878, 32889, 32972, 33079, 33118, 33299, 33334, 33356, 33383, 33615, 33633, 33876, 33880, 33881, 33895, 33955, 34077, 34087, 34239, 34531, 34557, 34585, 34601, 34864, 34913, 35069, 35102, 35212, 35377, 35606, 35818, 35867, 35937, 35960, 36130, 36406, 36485, 36525, 36564, 36581, 36690, 36806, 36808, 36982, 37203, 37223, 37232, 37277, 37391, 37535, 37623, 37645, 37687, 37882, 38050, 38156, 38159, 38168, 38509, 38580, 38692, 38697, 38894, 38908, 38956, 38972, 38978, 39003, 39006, 39222, 39348, 39430, 39659, 39715, 39790, 39970, 40394, 40425, 40480, 40487, 40560, 40651, 40660, 40673, 40768, 40845, 40892, 40933, 40957, 40961, 41082, 41235, 41451, 41514, 41543, 41576, 41726, 41868, 41959, 41961, 41976, 42024, 42252, 42270, 42381, 42663, 42754, 42878, 43050, 43054, 43495, 43702, 43851, 43860, 43877, 43881, 44112, 44135, 44195, 44278, 44366, 44436, 44613, 44742, 44812, 44981, 44985, 45102, 45104, 45412, 45457, 45594, 45839, 45908, 46194, 46262, 46290, 46343, 46462, 46508, 46549, 46625, 46657, 46718, 46793, 47035, 47174, 47177, 47186, 47188, 47274, 47404, 47419, 47590, 47685, 47699, 47799, 47905, 48170, 48235, 48326, 48383, 48521, 48536, 48629, 48663, 48699, 48726, 48798, 48921, 48933, 48952, 49084, 49087, 49315, 49380, 49694, 50327, 50555, 50617, 50696, 50754, 50756, 50798, 50834, 50903, 50974, 51050, 51075, 51095, 51399, 51461, 51937, 51949, 51982, 52026, 52029, 52100, 52452, 52521, 52570, 52576, 52620, 52659, 52720, 53334, 53582, 53648, 53683, 53709, 53712, 53912, 54020, 54080, 54130, 54134, 54237, 54576, 54763, 55180, 55535, 55647, 55971, 55973, 56028, 56150, 56160, 56196, 56208, 56226, 56390, 56526, 56629, 56719, 56782, 56798, 56885, 57112, 57237, 57243, 57310, 57334, 57338, 57351, 57408, 57772, 58024, 58215, 58267, 58271, 58312, 58314, 58565, 58613, 58635, 58690, 58922, 58945, 58958, 59093, 59217, 59238, 59332, 59483, 59497, 59509, 59527, 59608, 59905, 59937, 59970, 60127, 60161, 60288, 60502, 60574, 60594, 60677, 60759, 60840, 60956, 61009, 61072, 61104, 61189, 61198, 61232, 61235, 61286, 61448, 61518, 61567, 61700, 61722, 61741, 61771, 61933, 62067, 62270, 62287, 62446, 62538, 62572, 62628, 62687, 62971, 62974, 63029, 63118, 63176, 63178, 63216, 63336, 63414, 63416, 63465, 63612, 63682, 63875, 63948, 64124, 64306, 64308, 64317, 64337, 64478, 64503, 64543, 64669, 64715, 65032, 65110, 65241, 65253, 65262, 65542, 65562, 65656, 66187, 66298, 66386, 66541, 66762, 66898, 67554, 67762, 67772, 67831, 67980, 67981, 68140, 68548, 68820, 69166, 69193, 69206, 69259, 69294, 69551, 69597, 69645, 69708, 69729, 69773, 69994, 69997, 70075, 70094, 70245, 70312, 70645, 70661, 70907, 71177, 71190, 71217, 71374, 71390, 71472, 71557, 71621, 71654, 71721, 71848, 71853, 71876, 71925, 71956, 72039, 72170, 72312, 72365, 72457, 72501, 73064, 73308, 73691, 73747, 73938, 73963, 74026, 74165, 74273, 74330, 74359, 74480, 74504, 74555, 74731, 74817, 74947, 74975, 75047, 75048, 75062, 75106, 75275, 75453, 75516, 75675, 75838, 75925, 75947, 76067, 76265, 76286, 76340, 76412, 76484, 76518, 76539, 76582, 76627, 76720, 76721, 77042, 77071, 77129, 77228, 77285, 77476, 77484, 77562, 77565, 77662, 77677, 78026, 78070, 78136, 78181, 78222, 78430, 78450, 78607, 78647, 78776, 78904, 78939, 79012, 79060, 79110, 79133, 79193, 79204, 79242, 79300, 79391, 79487, 79503, 79559, 79626, 79680, 79747, 80116, 80233, 80258, 80375, 80410, 80427, 80495, 80498, 80519, 80732, 80754, 80786, 80879, 80960, 81123, 81323, 81483, 81823, 81853, 81916, 81948, 81974, 82004, 82009, 82014, 82097, 82156, 82289, 82360, 82361, 82379, 82550, 82556, 82613, 82669, 82800, 82921, 83047, 83049, 83227, 83396, 83411, 83415, 83750, 84155, 84214, 84496, 84563, 84589, 84593, 84620, 84681, 84781, 85006, 85054, 85084, 85187, 85212, 85357, 85358, 85586, 85794, 85826, 86050, 86072, 86166, 86181, 86213, 86391, 86422, 86524, 86612, 86735, 86900, 86914, 86978, 86982, 87037, 87107, 87152, 87233, 87374, 87716, 87746, 88030, 88065, 88167, 88186, 88236, 88257, 88310, 88394, 88403, 88441, 88513, 88519, 88605, 88792, 89053, 89108, 89182, 89309, 89341, 89435, 89447, 89451, 89617, 89796, 89817, 89865, 90157, 90274, 90282, 90297, 90480, 90557, 90583, 90884, 90893, 91064, 91392, 91488, 91555, 91785, 91838, 91901, 92143, 92201, 92225, 92237, 92415, 92449, 92452, 92487, 92641, 92648, 92782, 93277, 93382, 93437, 93438, 93526, 93657, 93739, 93806, 93831, 93842, 93996, 94002, 94023, 94060, 94148, 94209, 94295, 94337, 94349, 94488, 94579, 94599, 94656, 94827, 94863, 94960, 95075, 95168, 95196, 95311, 95335, 95364, 95417, 95474, 95909, 95965, 96155, 96186, 96267, 96663, 96730, 97135, 97207, 97232, 97371, 97478, 97479, 97512, 97678, 97718, 97856, 97869, 97948, 98238, 98275, 98419, 98429, 98451, 98563, 98669, 98700, 98752, 98756, 98779, 98888, 98904, 99157, 99163, 99266, 99383, 99391, 99394, 99419, 99512, 99587};
        Long expected = 8555942304530l;
        //When
        Long actual = newMain.getSumLong(testArray);
        //Then
        Assert.assertEquals(expected, actual);
    }

    @Test
    public void longFasterMethod() {
        //Given
        Integer[] testArray = {81, 134, 157, 290, 550, 644, 693, 734, 902, 969, 1107, 1154, 1239, 1285, 1351, 1566, 1616, 1632, 1779, 1858, 1884, 1955, 2000, 2023, 2069, 2159, 2281, 2375, 2446, 2535, 2628, 2709, 2723, 2830, 2944, 2956, 3096, 3248, 3302, 3351, 3405, 3507, 3674, 3692, 3811, 3974, 4177, 4191, 4471, 4617, 4673, 5018, 5038, 5097, 5302, 5330, 5410, 5530, 5591, 5786, 6013, 6144, 6173, 6484, 6595, 6718, 6743, 7117, 7175, 7424, 7547, 7575, 7581, 7684, 7761, 7801, 7886, 7976, 8113, 8164, 8180, 8260, 8469, 8500, 8565, 8591, 8597, 8634, 8679, 8790, 9005, 9127, 9136, 9355, 9386, 9432, 9444, 9473, 9547, 9646, 9649, 9771, 9780, 9835, 9968, 10177, 10304, 10464, 10489, 10544, 10593, 11023, 11297, 11430, 11473, 11864, 12037, 12091, 12209, 12600, 12847, 12959, 12984, 13048, 13091, 13372, 13500, 13575, 13594, 13850, 13902, 13950, 13976, 14044, 14414, 14432, 14443, 14500, 14679, 15194, 15221, 15254, 15342, 15344, 15358, 15378, 15590, 15595, 15792, 16193, 16394, 16518, 16545, 16667, 16709, 17408, 17666, 17682, 17747, 17870, 17929, 17989, 17999, 18108, 18185, 18354, 18363, 18431, 18475, 18630, 18645, 18775, 18805, 18856, 19031, 19059, 19077, 19085, 19181, 19310, 19583, 19666, 19886, 20006, 20079, 20208, 20251, 20324, 20473, 20545, 20552, 20606, 20720, 20803, 20867, 20888, 21029, 21081, 21332, 21406, 21424, 21445, 21458, 21568, 21665, 21672, 21991, 21993, 22019, 22499, 22571, 22574, 22583, 22709, 22773, 22883, 22909, 23011, 23250, 23349, 23453, 23472, 23664, 23774, 23851, 23882, 23939, 24303, 24372, 24427, 24459, 24657, 24824, 24834, 24894, 24990, 25179, 25241, 25251, 25493, 25532, 25727, 25853, 25885, 25949, 26034, 26115, 26194, 26248, 26308, 26344, 26517, 26628, 26960, 27010, 27040, 27144, 27371, 27445, 27762, 27832, 27974, 28338, 28389, 28395, 28431, 28515, 28600, 28725, 28772, 28844, 28991, 29060, 29314, 29456, 29721, 29934, 30045, 30094, 30117, 30241, 30379, 30513, 30674, 30743, 30753, 30907, 31017, 31025, 31182, 31202, 31277, 31284, 31296, 31421, 31497, 31522, 31645, 31759, 31840, 31866, 31925, 31930, 31944, 31984, 32192, 32268, 32274, 32372, 32436, 32549, 32633, 32731, 32829, 32843, 32878, 32889, 32972, 33079, 33118, 33299, 33334, 33356, 33383, 33615, 33633, 33876, 33880, 33881, 33895, 33955, 34077, 34087, 34239, 34531, 34557, 34585, 34601, 34864, 34913, 35069, 35102, 35212, 35377, 35606, 35818, 35867, 35937, 35960, 36130, 36406, 36485, 36525, 36564, 36581, 36690, 36806, 36808, 36982, 37203, 37223, 37232, 37277, 37391, 37535, 37623, 37645, 37687, 37882, 38050, 38156, 38159, 38168, 38509, 38580, 38692, 38697, 38894, 38908, 38956, 38972, 38978, 39003, 39006, 39222, 39348, 39430, 39659, 39715, 39790, 39970, 40394, 40425, 40480, 40487, 40560, 40651, 40660, 40673, 40768, 40845, 40892, 40933, 40957, 40961, 41082, 41235, 41451, 41514, 41543, 41576, 41726, 41868, 41959, 41961, 41976, 42024, 42252, 42270, 42381, 42663, 42754, 42878, 43050, 43054, 43495, 43702, 43851, 43860, 43877, 43881, 44112, 44135, 44195, 44278, 44366, 44436, 44613, 44742, 44812, 44981, 44985, 45102, 45104, 45412, 45457, 45594, 45839, 45908, 46194, 46262, 46290, 46343, 46462, 46508, 46549, 46625, 46657, 46718, 46793, 47035, 47174, 47177, 47186, 47188, 47274, 47404, 47419, 47590, 47685, 47699, 47799, 47905, 48170, 48235, 48326, 48383, 48521, 48536, 48629, 48663, 48699, 48726, 48798, 48921, 48933, 48952, 49084, 49087, 49315, 49380, 49694, 50327, 50555, 50617, 50696, 50754, 50756, 50798, 50834, 50903, 50974, 51050, 51075, 51095, 51399, 51461, 51937, 51949, 51982, 52026, 52029, 52100, 52452, 52521, 52570, 52576, 52620, 52659, 52720, 53334, 53582, 53648, 53683, 53709, 53712, 53912, 54020, 54080, 54130, 54134, 54237, 54576, 54763, 55180, 55535, 55647, 55971, 55973, 56028, 56150, 56160, 56196, 56208, 56226, 56390, 56526, 56629, 56719, 56782, 56798, 56885, 57112, 57237, 57243, 57310, 57334, 57338, 57351, 57408, 57772, 58024, 58215, 58267, 58271, 58312, 58314, 58565, 58613, 58635, 58690, 58922, 58945, 58958, 59093, 59217, 59238, 59332, 59483, 59497, 59509, 59527, 59608, 59905, 59937, 59970, 60127, 60161, 60288, 60502, 60574, 60594, 60677, 60759, 60840, 60956, 61009, 61072, 61104, 61189, 61198, 61232, 61235, 61286, 61448, 61518, 61567, 61700, 61722, 61741, 61771, 61933, 62067, 62270, 62287, 62446, 62538, 62572, 62628, 62687, 62971, 62974, 63029, 63118, 63176, 63178, 63216, 63336, 63414, 63416, 63465, 63612, 63682, 63875, 63948, 64124, 64306, 64308, 64317, 64337, 64478, 64503, 64543, 64669, 64715, 65032, 65110, 65241, 65253, 65262, 65542, 65562, 65656, 66187, 66298, 66386, 66541, 66762, 66898, 67554, 67762, 67772, 67831, 67980, 67981, 68140, 68548, 68820, 69166, 69193, 69206, 69259, 69294, 69551, 69597, 69645, 69708, 69729, 69773, 69994, 69997, 70075, 70094, 70245, 70312, 70645, 70661, 70907, 71177, 71190, 71217, 71374, 71390, 71472, 71557, 71621, 71654, 71721, 71848, 71853, 71876, 71925, 71956, 72039, 72170, 72312, 72365, 72457, 72501, 73064, 73308, 73691, 73747, 73938, 73963, 74026, 74165, 74273, 74330, 74359, 74480, 74504, 74555, 74731, 74817, 74947, 74975, 75047, 75048, 75062, 75106, 75275, 75453, 75516, 75675, 75838, 75925, 75947, 76067, 76265, 76286, 76340, 76412, 76484, 76518, 76539, 76582, 76627, 76720, 76721, 77042, 77071, 77129, 77228, 77285, 77476, 77484, 77562, 77565, 77662, 77677, 78026, 78070, 78136, 78181, 78222, 78430, 78450, 78607, 78647, 78776, 78904, 78939, 79012, 79060, 79110, 79133, 79193, 79204, 79242, 79300, 79391, 79487, 79503, 79559, 79626, 79680, 79747, 80116, 80233, 80258, 80375, 80410, 80427, 80495, 80498, 80519, 80732, 80754, 80786, 80879, 80960, 81123, 81323, 81483, 81823, 81853, 81916, 81948, 81974, 82004, 82009, 82014, 82097, 82156, 82289, 82360, 82361, 82379, 82550, 82556, 82613, 82669, 82800, 82921, 83047, 83049, 83227, 83396, 83411, 83415, 83750, 84155, 84214, 84496, 84563, 84589, 84593, 84620, 84681, 84781, 85006, 85054, 85084, 85187, 85212, 85357, 85358, 85586, 85794, 85826, 86050, 86072, 86166, 86181, 86213, 86391, 86422, 86524, 86612, 86735, 86900, 86914, 86978, 86982, 87037, 87107, 87152, 87233, 87374, 87716, 87746, 88030, 88065, 88167, 88186, 88236, 88257, 88310, 88394, 88403, 88441, 88513, 88519, 88605, 88792, 89053, 89108, 89182, 89309, 89341, 89435, 89447, 89451, 89617, 89796, 89817, 89865, 90157, 90274, 90282, 90297, 90480, 90557, 90583, 90884, 90893, 91064, 91392, 91488, 91555, 91785, 91838, 91901, 92143, 92201, 92225, 92237, 92415, 92449, 92452, 92487, 92641, 92648, 92782, 93277, 93382, 93437, 93438, 93526, 93657, 93739, 93806, 93831, 93842, 93996, 94002, 94023, 94060, 94148, 94209, 94295, 94337, 94349, 94488, 94579, 94599, 94656, 94827, 94863, 94960, 95075, 95168, 95196, 95311, 95335, 95364, 95417, 95474, 95909, 95965, 96155, 96186, 96267, 96663, 96730, 97135, 97207, 97232, 97371, 97478, 97479, 97512, 97678, 97718, 97856, 97869, 97948, 98238, 98275, 98419, 98429, 98451, 98563, 98669, 98700, 98752, 98756, 98779, 98888, 98904, 99157, 99163, 99266, 99383, 99391, 99394, 99419, 99512, 99587};
        Long expected = 8555942304530l;
        //When
        Long actual = newMain.fasterSumLong(testArray);
        //Then
        Assert.assertEquals(expected, actual);
    }
}